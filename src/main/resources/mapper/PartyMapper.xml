<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team1.careercanvas.mapper.PartyMapper">
    <select id="getmyParty" resultType="com.team1.careercanvas.vo.PartyVO">
        select p.partyid      as partyid,
               p.partyname    as partyname,
               p.partycomment as partycomment,
               p.user_userid  as user_userid
        from party p
                 left join partymember m on p.partyid = m.party_partyid
        where m.user_userid = #{param1};
    </select>

    <select id="SelectPartyList" resultType="com.team1.careercanvas.vo.PartyVO">
        select *
        from party p
        join partymember m
        on p.partyid = m.party_partyid and m.user_userid = #{param1}
        where m.status = 'done';
    </select>

    <select id="myteamSelect" resultType="com.team1.careercanvas.vo.PartyVO">
        select *
        from party
        where partyid = #{param1};
    </select>

    <select id="SelectMemberList" resultType="com.team1.careercanvas.vo.UserVO">
        select *
        from user
                 join partymember
                      on partymember.user_userid = user.userid
        where partymember.party_partyid = #{param1} and partymember.status = 'done';
    </select>

    <select id="SelectMemoListView" resultType="com.team1.careercanvas.vo.MemoVO">
        select partymemo.party_partyid as party_partyid,
               partymemo.user_userid as user_userid,
               partymemo.partymemocontent as partymemocontent,
               partymemo.partymemo as partymemo,
               partymemo.datetime as datetime,
               user.username as username
        from partymemo join user on partymemo.user_userid = user.userid
        where party_partyid = #{param1}
        order by datetime desc;
    </select>

    <insert id="InsertMemo">
        insert into partymemo(party_partyid, partymemocontent, user_userid)
        VALUES (#{param1}, #{param2}, #{param3});
    </insert>

    <delete id="DeleteMemo">
        delete from partymemo where partymemo = #{param1};
    </delete>

    <insert id="InsertCreateTeam">
        insert into party(partyname, partygoal, partycomment, user_userid)
        VALUES (#{partyname}, #{partygoal}, #{partycomment}, #{user_userid});
            <selectKey keyProperty="partyid" order="AFTER" resultType="int">
                SELECT LAST_INSERT_ID()
            </selectKey>
    </insert>

    <update id="InsertPartyImg">
        update party
        set partyimage = #{param1}
        where partyid = #{param2}
    </update>

    <insert id="InsertMember">
        insert into partymember(party_partyid, user_userid, status)
        values (#{param1}, #{param2}, #{param3});
    </insert>

    <select id="CheckPartyName" resultType="Integer">
        select count(partyid) from party where partyname = #{param1}
    </select>

    <update id="UpdatePartyName">
        update party
        set partyname = #{param1}
        where partyid = #{param2}
    </update>

    <update id="UpdatePartyObjective">
        update party
        set partygoal = #{param2}
        where partyid = #{param1}
    </update>

    <update id="UpdatePartyIntro">
        update party
        set partycomment = #{param2}
        where partyid = #{param1}
    </update>

    <!--조석훈 시작-->
    <select id="getMineParty" resultType="com.team1.careercanvas.vo.PartyVO">
        select * from party where user_userid=#{param1};
    </select>

    <insert id="InsertWanted" parameterType="com.team1.careercanvas.vo.WantedVO">
        insert into partywanted(wantedtitle, wantedcontent, party_partyid, user_userid)
        values (#{wantedtitle}, #{wantedcontent}, #{party_partyid}, #{user_userid})
    </insert>

    <select id="GetWantedList" resultType="com.team1.careercanvas.vo.WantedVO">
        select pw.wantedid as wantedid,
               pw.user_userid as user_userid,
               pw.date as date,
               pw.view as view,
               pw.wantedtitle as wantedtitle,
               p.partyname as partyname,
        count(wc.commentid) as commentAmount
        from partywanted pw
        join party p on pw.party_partyid = p.partyid
        left join wantedcomment wc on pw.wantedid = wc.partywanted_wantedid
        <where>
            <if test="searchKey == 'all'">
                pw.wantedtitle like CONCAT('%', #{searchWord}, '%')
                or pw.user_userid like CONCAT('%', #{searchWord}, '%')
                or pw.wantedcontent like CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'title'">
                pw.wantedtitle LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'author'">
                pw.user_userid LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'content'">
                pw.wantedcontent LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'partyname'">
        p.partyname like CONCAT('%', #{searchWord}, '%')
            </if>
        </where>

        group by pw.wantedid
        <choose>
            <when test="postSort==1">
                order by wantedid desc
            </when>
            <when test="postSort==2">
                order by view desc, wantedid desc
            </when>
        </choose>
                    limit #{onePageRecord} offset #{offsetPoint}

    </select>

    <select id="getWantedListCount" resultType="Integer">
        select count(wantedid)
        from partywanted
        join party p on party_partyid = p.partyid
        <where>
            <if test="searchKey == 'all'">
                wantedtitle like CONCAT('%', #{searchWord}, '%')
                or p.user_userid like CONCAT('%', #{searchWord}, '%')
                or wantedcontent like CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'title'">
                wantedtitle LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'author'">
                p.user_userid LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'content'">
                wantedcontent LIKE CONCAT('%', #{searchWord}, '%')
            </if>
            <if test="searchKey == 'partyname'">
                p.partyname like CONCAT('%', #{searchWord}, '%')
            </if>
        </where>
    </select>

    <select id="GetWantedView" resultType="com.team1.careercanvas.vo.WantedVO">
        select * from partywanted where wantedid = #{param1}
    </select>

    <select id="commentLoad" resultType="com.team1.careercanvas.vo.CommentVO">
        select wc.commentid as commentid,
               wc.target_parent as target_parent,
               wc.commentcontent as commentcontent,
               wc.partywanted_wantedid as partywanted_wantedid,
               wc.date as date,
               wc.depth as depth,
               wc.isdelete as isdelete,
               u.userid as user_userid,
               u.username as username,
               u.profileimg as profileimg
        from wantedcomment as wc
        join user as u on wc.user_userid = u.userid
        where wc.partywanted_wantedid=#{param1}
        order by wc.target_parent asc, wc.commentid asc;
    </select>

    <insert id="replyInsert" parameterType="com.team1.careercanvas.vo.CommentVO">
        insert into wantedcomment(user_userid, partywanted_wantedid, commentcontent, depth
        <if test="target_parent!=null">, target_parent</if>)
        values(#{user_userid}, #{partywanted_wantedid}, #{commentcontent}, #{depth}
        <if test="target_parent!=null">, #{target_parent}</if>);
            <selectKey keyProperty="commentid" order="AFTER" resultType="int">
                select last_insert_id()
            </selectKey>
    </insert>

    <update id="replyInsertTP">
        update wantedcomment
        set target_parent=#{commentid}
        where commentid=#{commentid}
    </update>

    <delete id="DeleteWanted">
        delete
        from partywanted
        where wantedid=#{param1}
    </delete>

    <insert id="reportWanted">
        insert into report(reporttype, targetid, user_userid, title, userid)
        values('wanted', #{param1}, #{param4}, #{param3}, #{param2});
    </insert>

    <select id="getCommentWriter" resultType="String">
        select user_userid
        from wantedcomment
        where commentid=#{param1}
    </select>

    <select id="getCommentcontent" resultType="String">
        select commentcontent
        from wantedcomment
        where commentid=#{param1}
    </select>

    <insert id="commentReport" parameterType="com.team1.careercanvas.vo.ReportVO">
        insert into report(reporttype, targetid, user_userid, title, userid, originpostid)
        values(#{reporttype}, #{targetid}, #{user_userid}, #{title}, #{userid}, #{originpostid});
    </insert>

    <update id="deleteWantedComment">
        UPDATE wantedcomment
        SET commentcontent = '삭제된 댓글입니다.', isdelete=1
        WHERE commentid = #{param1};
    </update>

    <update id="increseView">
        update partywanted
        set view=view+1
        where wantedid=#{param1}
    </update>

    <insert id="applyParty">
        insert into partymember(party_partyid, user_userid)
        values(#{param2}, #{param1});
    </insert>

    <select id="getPartyName" resultType="String">
        select partyname
        from party
        where partyid=#{param1};
    </select>

<!--    getpartyimg는 파티이미지 변경 시 사용 예정 건들지마세요-->
    <select id="getpartyimg" resultType="String">
        select partyimage
        from party
        where partyid=#{param1};
    </select>

    <select id="CheckpartyId" resultType="Integer">
        select count(partyid)
        from party
        where partyid=#{param1}
    </select>
    <!--조석훈 끝-->

    <!-- 정인식 작업 -->
    <select id="SelectWaitingList" resultType="com.team1.careercanvas.vo.UserVO">
        select *
        from user
                 join partymember
                      on partymember.user_userid = user.userid
        where partymember.party_partyid = #{param1} and partymember.status = 'waiting';
    </select>

    <delete id="DeleteMember">
        delete
        from partymember
        where party_partyid = #{param1} and user_userid = #{param2}
    </delete>

    <update id="ApproveMember">
        update partymember
        set status = 'done'
        where party_partyid=#{param1} and user_userid=#{param2}
    </update>

    <delete id="RefuseMember">
        delete
        from partymember
        where party_partyid = #{param1} and user_userid = #{param2}
    </delete>

    <update id="UpdatePartyImg">
        update party
        set partyimage=#{param1}
        where partyid=#{param2}
    </update>

    <select id="SelectPofolList" resultType="com.team1.careercanvas.vo.PofolVO">
        select *
        from portpolio
        where partyid = #{searchWord}
        order by portfolioid desc
        limit #{onePageRecord} offset #{offsetPoint}
    </select>

    <select id="getpofolamountforparty" resultType="Integer">
        select count(portfolioid) from portpolio where partyid=#{param1}
    </select>

    <insert id="pofolWrite">
        insert into portpolio (user_userid, portfoliotitle, portfoliocontent, ispublic, category, partyid, isteam)
        values (#{user_userid} , #{portfoliotitle}, #{portfoliocontent},0, #{category}, #{partyid},0);
        <selectKey keyProperty="portfolioid" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <insert id="addPofolMember">
        insert into pofolcont (portfolioid, userid)
        values  (#{param1}, #{param2})
    </insert>

    <update id="insertPofolImg">
        update portpolio
        set imgsrc=#{param1}
        where portfolioid=#{param2}
    </update>
    <!-- 정인식 작업 끝 -->

</mapper>